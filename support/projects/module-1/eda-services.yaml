---
kind: ConfigMap
apiVersion: v1
metadata:
  name: amqp-properties
data:
  application.properties: |
    quarkus.qpid-jms.url=amqp://amq-broker-amqp-0-svc
    quarkus.qpid-jms.username=user
    quarkus.qpid-jms.password=openshift
---
apiVersion: camel.apache.org/v1
kind: IntegrationPlatform
metadata:
  name: camel-ip
  labels:
    app: "camel-k"
spec:
  build:
    maven:
      timeout: 10m0s
    timeout: 20m0s
---
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: inventory-events
spec:
  configuration:
    - type: configmap
      value: amqp-properties
  dependencies:
    - 'camel:jms'
    - 'camel:jackson'
    - 'mvn:org.amqphub.quarkus:quarkus-qpid-jms'    
  sources:
    - content: |-
        // camel-k: language=js

        // Write your routes here, for example:
        from('jms:topic:incomingorders')
            .log('Inventory Notified ${body}')
            .delay(5000).asyncDelayed()
            .process((e) => handleInventory(e))
            .to('jms:topic:notifications?disableReplyTo=true')
            .to('log:info');

        const handleInventory = (e) => {
          const order = JSON.parse(
              String.fromCharCode.apply(String, e.getMessage().getBody())
          );
          const result = JSON.stringify({
              orderId: order.orderId,
              itemId: order.itemId,
              department: 'inventory',
              datetime: Date.now(),
              quantity: order.quantity,
              flavor: order.orderItemName,
              inventoryId: Math.floor(100000 + Math.random() * 999999)
          });
          e.getOut().setBody(result);
        }
      name: inventory-events.js
---
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: invoice-events
spec:
  configuration:
    - type: configmap
      value: amqp-properties
  dependencies:
    - 'camel:jackson'
    - 'camel:jms'
    - 'mvn:org.amqphub.quarkus:quarkus-qpid-jms'      
  sources:
    - content: |-
        // camel-k: language=js

        // Write your routes here, for example:
        from('jms:topic:incomingorders')
            .log('Invoicing Notified ${body}')
            .delay(10000).asyncDelayed()
            .process((e) => handleInvoice(e))
            .to('jms:topic:notifications?disableReplyTo=true')
            .to('log:info');

        const handleInvoice = (e) => {
          const order = JSON.parse(
              String.fromCharCode.apply(String, e.getMessage().getBody())
          );
          const result = JSON.stringify({
              orderId: order.orderId,
              itemId: order.itemId,
              department: 'invoicing',
              datetime: Date.now(),
              amount: (order.quantity*order.price),
              currency: 'USD',
              invoiceId: (Math.floor(100000 + Math.random() * 999999))
          });
          e.getOut().setBody(result);
        }
      name: invoice-events.js
